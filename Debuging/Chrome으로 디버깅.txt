Chrome으로 디버깅하기
참고 사이트 : https://ko.javascript.info/debugging-chrome
1. 'Sources' 패널
 - Chrome을 사용해 예시 페이지를 엽니다.
   https://ko.javascript.info/article/debugging-chrome/debugging/index.html
 - F12(MacOS: Cmd+Opt+I)눌러 개발자 도구를 엽니다.
 - Source 탭을 클릭해 Source 패널을 엽니다.
 - 토글 버튼을 누르면 navigator가 열리면서 현재 사이트와 관련된 파일들이 나열됩니다.
 - Source 패널은 크게 세 개의 영역으로 구성됩니다.
  1. 파일 탐색 영역 : 페이지를 구성하는 데 쓰인 모든 리소스(HTML, JavaScrpt, CSS, 이미지 파일 등)를 트리형태로 보여줍니다. Chrome Extension이 여기 나타날 수도 있습니다.
  2. 코드 에디터 영역 : 리소스 영역에서 선택한 파일의 소스 코드를 보여줍니다. 여기서 소스 코드를 편집할 수도 있습니다.
  3. 자바스크립트 디버깅 영역 : 디버깅에 관련된 기능을 제공

2. 콘솔
 - ESC를 누르면 개발자 도구 하단부에 콘솔 창이 열립니다. 여기에 명령어를 입력하고 Enter를 누르면 입력한 명령어가 실행됩니다.
 - 콘솔 창에 구문(statement)를 입력하고 실행하면 아랫줄에 실행 결과가 출력됩니다.
 ex) 1+2를 입력하면 3이 출력되고, hello("dubugger")를 입력하면 undeined가 출련된다.


3. 중단점
 - 예시 페이지 내부에서 무슨 일이 일어나는지 자세히 살펴봅시다.
 - hello.js를 소스코드 영역에 띄우고 네 번째 줄 코드 좌측의 줄번호, 4를 클릭합시다. 코드가 아닌 줄 번호 4에 마우스 커서를 옮긴후 클릭해야 합니다.
 - 중 번호 8도 클릭해 중단점을 하나 더 추가해봅시다.
 - 줄 번호 4와 8이 파란색으로 또는 체크가 된것을 볼 수 있다.
 - 중단점(breakpoint)은 말 그대로 자바스크립트의 실행이 중단되는 코드 내 지점을 의미합니다.
 - 중단점을 이용하면 실행이 중지된 시점에 변수가 어떤 값을 담고 있는 지 알 수 있습니다.
 - 또한 실행이 중지된 시점을 기준으로 명령어를 실행할 수도 있습니다.
 - Source 패널 우측의 디버깅 여역을 보면 중단점 목록을 확인할 수 있습니다.
 - 파일 여러 개에 다수의 중단점을 설정해 놓은 경우, 디버깅 영역을 이용하면 아래와 같은 작업을 할 수도 있습니다.
  - 항목을 클릭해 해당 중단점이 설정되 곳으로 바로 이동할 수 있습니다.
  - 체크 박스 선택을 해제해 해당 중단점을 비활성화 할 수 있습니다.
  - 마우스 오른쪽 버튼을 클릭했을 때 나오는 중단점 제거 관련 기능으로 중단점을 삭제할 수도 있습니다.
  - 이 외에도 다양한 기능이 있습니다.

- 조건부 중단점
  : 줄 번호에 커서를 옮긴 후 마우스 오른쪽을 클릭하면 조건부 중단점(conditional breakpoint)을 설정할 수 있습니다. 
    Add conditional breakpoint를 클릭했을 때 뜨는 작은 창에 표현식을 입력하면, 표현식이 참인 경우에만 실행을 중지시킬 수 있습니다.
    조건부 중단점을 설정하면 변수에 특정 값이 할당될 때나 함수의 매개 변수에 트정 값이 들어올 때만 실행을 중단시킬수 있어 디버깅시 유용하게 활용할 수 있습니다.


4. debugger 명령어
 - 아래 예시처럼 스크립트 내 debugger 명령어를 적어주면 중단점을 설정한 것과 같은 효과를 봅니다.

 function hello(name) {
  let phrase = `Hello, ${name}!`;

  debugger;  // <-- 여기서 실행이 멈춥니다.

  say(phrase);
}  

5. 멈추면 보이는 것들
 - 중단점이 제대로 설정되어있는지 확인하고, 새로고침 단축키를 눌러 중단점을 작동시켜봅시다.
 - 이 상태에서 디버깅 영역의 v를 클릭해 하위 패널들을 하나씩 펼쳐봅시다. 각 패널은 아래와 같은 기능을 제공합니다.
  1. Watch - 표현식을 평가하고 결과를 보여줍니다.
    - Add Expression버튼 +를 클릭해 원하 표현식을 입력한 후 Enter를 누르면 중단 시점의 값을 보여줍니다. 입력한 표현식은 실행 과정 중에 계속해서 재평가됩니다.
  2. Call Stack - 코드를 해당 중단점으로 안내한 실행 경로를 역순으로 표시합니다.
    - 실행은 index.html 안에서 hello()를 호출하는 과정 중에 멉췄습니다. 함수 hello 내에 중단점을 설정했기 때문에, 콜 스택(Call Stack) 최상단에 hello가 위치합니다.
    - hello.html에서 함수 hello를 정의하지 않았기 때문에 콜스택 하단엔 'anonymous'가 출력됩니다.
    - 콜 스택 내의 항목을 클릭하면 디버거가 해당 코드로 휙 움직이고, 변수 역시 재평가됩니다.
  3. Scope - 현재 정의된 모든 변수를 출력합니다.
    - Local : 함수의 지역변수를 보여줍니다. 지역 변수 정보는 소스 코드 영역에서도 확인(강조 표시)할 수 있습니다.
    - Global : 함수 바깥에 정의된 전역 변수를 보여줍니다.
    - Local 하위 항목으로 this에 대한 정보도 출력됩니다.

6. 실행 추적하기
  - 디버깅 영역 상단에 있는 버튼들이 무슨 역할을 하는 지 알아봅시다.
    1. 'Resume' : 스크립트 실행을 다시 시작함 (단축키 : F8)
     - 실행을 재개합니다. 추가 중단점이 없는 경우, 실행이 죽 이어지고 디버거는 동작하지 않습니다.
    2. 'Step" : 다음 명령어를 실행함 (단축키 : F9)
     - 다음 문을 실행합니다. 클릭하면 alert 창이 뜨는 것을 확인할 수 있습니다.
     - Step 버튼을 계속 누르면 스크립트 전체를 문 단위로 하나하나 실행할 수 있습니다.
    3. 'Step over' : 다음 명령어를 실행하되, 함수 안으로 들어가진 않음 (단축키 : F10)
     - 'Step'과 유사하지만, 다음 문이 함수 호출할 때 'Step'과는 다르게 동작합니다. (alert 같은 내장 함수에는 해당하지 않고, 직접 작성한 함수 일때만 동작이 다릅니다.)
     - 'Step'은 함수 내부로 들어가 함수 본문 첫 번째 줄에서 실행을 멉춥니다. 반면에 'Step over'는 보이지 않는 곳에서 중첩 함수를 실행하긴 하지만 함수 내로 집입하지 않습니다.
     - 실행은 함수 실행이 끝난 후에 즉시 멉춥니다.     
     - 'Step'은 함수 호출 시 내부에서 어떤 일이 일어나는지 궁금하지 않을 때 유용합니다.
    4. 'Step into' (단축키 : F11)
     - 'Step'과 유사한데, 비동기 함수 호출에서 'Step'과 다르게 동작합니다.
     - 'Step'은 setTimeout 같은 비동기 동작은 무시합니다. 반면 'Step into'는 비동기 동작을 담당하는 코드로 집합하고, 필요하다면 비동기 동작이 완료될 때까지 대기합니다.
    5. 'Step out' : 실행 중인 함수의 실행이 끝날 때 까지 실행을 계속 함 (단축키 : Shift + F11)
     - 현재 실행 중인 함수의 실행을 계속 이어가다가 함수 본문 마지막 줄에서 실행을 멈춥니다. 
     - 실수로 'Step'을 눌러 내부 동작을 알고 싶지 않은 중첩 함수로 진입했거나 가능한 한 빨리 함수 실행을 빨리 끝내고 싶은 경우 우용합니다.
    6. 모든 중단점을 활성화/비활성화
    7. 예외 발생 시 코드를 자동 중지시켜주는 기능을 활성화/비활성화
     - 활성화 되어 있고, 개발자 도구가 열려있는 상태에서 스크립트 실행 중에 에러가 발생하면 실행이 자동으로 멉춥니다.

  - Continue to here 옵션
    : 특정 줄에서 마우스 오른쪽 버튼을 클릭해 컨텍스트 메뉴를 열면 "Continue to here"라는 옵션을 볼 수 있습니다.
      중단점을 설정하기는 귀찮은데 해당 중에서 실행을 재개하고 싶을 때 아주 유용한 옵션

7. console.log

// 콘솔창을 열어 결과를 확인해 보세요.
for (let i = 0; i < 5; i++) {
  console.log("숫자", i);
}


요약
    스크립트 실행이 중단되는 경우는 다음과 같습니다.
        1. 중단점을 만났을 때
        2. dubugger 문 만났을 때
        3. 에러가 발생했을 때

개발자 도구 공식 메뉴얼 (https://developers.google.com/web/tools/chrome-devtools)    
